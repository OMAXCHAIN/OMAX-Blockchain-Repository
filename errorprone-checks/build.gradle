
// we use this config to get the path of the JDK 9 javac jar, to
// stick it in the bootclasspath when running tests
configurations.maybeCreate("epJavac")


apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
  api 'org.slf4j:slf4j-api'

  annotationProcessor 'com.google.auto.service:auto-service'

  implementation 'com.google.auto.service:auto-service'
  implementation 'com.google.errorprone:error_prone_annotation'
  implementation 'com.google.errorprone:error_prone_core'
  implementation 'info.picocli:picocli'

  testImplementation 'com.google.errorprone:error_prone_test_helpers'
  testImplementation 'junit:junit'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.junit.jupiter:junit-jupiter'

  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

  epJavac 'com.google.errorprone:error_prone_check_api'
}

test { testLogging { showStandardStreams = true } }


tasks.withType(JavaCompile) {
  options.compilerArgs += [
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
    '--add-exports',
    'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
  ]
}

javadoc { enabled = false }
